openapi: 3.0.0
info:
  title: Todolist API
  description: API documentation for the backend of a simple todo list app.
  version: 1.0.0
servers:
  - url: http://localhost:5000/api
    description: Local server

paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user with a username, email, and password.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: mysecurepassword
      responses:
        "201":
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: user registered
                  user:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      username:
                        type: string
                        example: johndoe
                      email:
                        type: string
                        example: johndoe@example.com
        "400":
          description: User already exists
        "500":
          description: Server error

  /auth/login:
    post:
      summary: Log in a user
      description: Authenticates a user and returns a JWT token.
      tags:
        - Auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: johndoe@example.com
                password:
                  type: string
                  example: mysecurepassword
      responses:
        "200":
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        "401":
          description: Invalid credentials
        "500":
          description: Server error

  /todos/{userId}:
    get:
      summary: Get all todos for a user
      description: Retrieve all todos associated with a specific user.
      tags:
        - Todos
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
          example: "123"
      responses:
        "200":
          description: List of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: string
                      example: "1"
                    title:
                      type: string
                      example: "Buy groceries"
                    completed:
                      type: boolean
                      example: false
        "401":
          description: Unauthorized
        "404":
          description: User not found
        "500":
          description: Server error

    post:
      summary: Create a new todo for a user
      description: Adds a new todo item for a specific user.
      tags:
        - Todos
      security:
        - BearerAuth: []
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: string
          example: "123"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Finish project"
                completed:
                  type: boolean
                  example: false
      responses:
        "201":
          description: Todo created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "2"
                  title:
                    type: string
                    example: "Finish project"
                  completed:
                    type: boolean
                    example: false
        "401":
          description: Unauthorized
        "500":
          description: Server error

  /todos/edit/{todoId}:
    put:
      summary: Update a todo item
      description: Edit an existing todo item by its ID.
      tags:
        - Todos
      security:
        - BearerAuth: []
      parameters:
        - name: todoId
          in: path
          required: true
          description: ID of the todo item to update
          schema:
            type: string
          example: "2"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Finish project report"
                completed:
                  type: boolean
                  example: true
      responses:
        "200":
          description: Todo updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: "2"
                  title:
                    type: string
                    example: "Finish project report"
                  completed:
                    type: boolean
                    example: true
        "401":
          description: Unauthorized
        "404":
          description: Todo not found
        "500":
          description: Server error

  /todos/delete/{todoId}:
    delete:
      summary: Delete a todo item
      description: Remove a todo item by its ID.
      tags:
        - Todos
      security:
        - BearerAuth: []
      parameters:
        - name: todoId
          in: path
          required: true
          description: ID of the todo item to delete
          schema:
            type: string
          example: "2"
      responses:
        "200":
          description: Todo deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Todo deleted successfully"
        "401":
          description: Unauthorized
        "404":
          description: Todo not found
        "500":
          description: Server error
